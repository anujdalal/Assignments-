/* Part of this code is Copyright (c) 1995, 2014, Oracle and/or its affiliates. All rights reserved.
 * 
 */

import java.net.*;
import java.io.*;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


public class myfileserver {
	
	 public static void main(String[] args) throws IOException {
		 
		 if (args.length != 2) {
	            System.err.println("Usage: java myfilerserver <port number>");
	            System.exit(1);
	        }
		 
		 int portNumber = Integer.parseInt(args[0]);
		 
		 try ( 
		            ServerSocket serverSocket = new ServerSocket(portNumber);		
		            Socket clientSocket = serverSocket.accept();					
		            PrintWriter out =
		                new PrintWriter(clientSocket.getOutputStream(), true);
		            BufferedReader in = new BufferedReader(
		                new InputStreamReader(clientSocket.getInputStream()));
		        ) {
		        
	            String inputLine, outputLine;
	            
	            // Initiate conversation with client
	            ClientWorkerThread c = new ClientWorkerThread();
	            outputLine = c.processInput(null);
	            out.println(outputLine);

	            while ((inputLine = in.readLine()) != null) {
	                outputLine = kkp.processInput(inputLine);
	                out.println(outputLine);
	                if (outputLine.equals("Bye."))
	                    break;
	            }
	        } catch (IOException e) {
	            System.out.println("Exception caught when trying to listen on port "
	                + portNumber + " or listening for a connection");
	            System.out.println(e.getMessage());
	        }
		 
	 }
}


class multiThreadServer implements Runnable {

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

		
}

class ClientWorkerThread {

	
}

class serverStatistics {
	
	public int totalReq = 0; //n initialize number total number of requests
	public int goodReq = 0; //m initialize total number of SUCCESSFUL requests
	
	public int getTotalReq() {
		
		return totalReq;	
	}

	public int getGoodReq() {
		
		return goodReq;
	}
	
	public int countTotalReq() {
		
		return totalReq++;
	}
	
	public int countGoodReq() {
		
		return goodReq++;
	}
}



